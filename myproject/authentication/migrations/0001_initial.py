# Generated by Django 5.0.7 on 2024-07-15 06:59

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('phone_number', models.CharField(max_length=12, unique=True)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('profile', models.ImageField(blank=True, null=True, upload_to='user_profiles')),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_professional', models.BooleanField(default=False)),
                ('customeruser_permissions', models.ManyToManyField(blank=True, related_name='customeruser_permissions', to='auth.permission')),
                ('groups', models.ManyToManyField(blank=True, related_name='customeruser_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Otpstore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.IntegerField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Professional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('name', models.CharField(max_length=50)),
                ('phone_number', models.CharField(max_length=12, unique=True)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('gender', models.CharField(max_length=20)),
                ('address', models.TextField(max_length=300)),
                ('profession', models.CharField(max_length=50)),
                ('years_of_exp', models.FloatField()),
                ('adhar_no', models.CharField(max_length=50)),
                ('earned_points', models.IntegerField()),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_professional', models.BooleanField(default=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, related_name='professional_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='professional_user_permissions', to='auth.permission')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
